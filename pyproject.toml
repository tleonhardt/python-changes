[project]
name = "python-changes"
version = "0.1.0"
description = "Add your description here"
readme = "README.md"
requires-python = ">=3.13"
dependencies = ["jupyterlab", "pydantic"]

[dependency-groups]
dev = ["ipython>=8", "pre-commit>=2.20.0", "ruff>=0.11"]

[tool.uv]
default-groups = ["dev"]

[tool.ruff]
# Exclude a variety of commonly ignored directories.
exclude = [
    ".git",
    ".ipynb_checkpoints",
    ".mypy_cache",
    ".pyenv",
    ".pytest_cache",
    ".pytype",
    ".ruff_cache",
    ".venv",
    ".vscode",
    "__pypackages__",
    "_build",
    "build",
    "dist",
    "node_modules",
    "site-packages",
    "venv",
]
extend-include = ["*.ipynb"]

# Same as Black.
line-length = 125
indent-width = 4
target-version = "py313" # Minimum supported version of Python
output-format = "full"

[tool.ruff.lint]
# Enable Pyflakes (`F`) and a subset of the pycodestyle (`E`)  codes by default.
# Unlike Flake8, Ruff doesn't enable pycodestyle warnings (`W`) or
# McCabe complexity (`C901`) by default.
select = [
    # https://docs.astral.sh/ruff/rules
    "A", # flake8-builtins (variables or arguments shadowing built-ins)
    # "AIR", # Airflow specific warnings
    "ANN",   # flake8-annotations (missing type annotations for arguments or return types)
    "ARG",   # flake8-unused-arguments (functions or methods with arguments that are never used)
    "ASYNC", # flake8-async (async await bugs)
    "B",     # flake8-bugbear (various likely bugs and design issues)
    "BLE",   # flake8-blind-except (force more specific exception types than just Exception)
    "C4",    # flake8-comprehensions (warn about things that could be written as a comprehensions but aren't)
    "C90",   # McCabe cyclomatic complexity (warn about functions that are too complex)
    "COM",   # flake8-commas (forces commas at the end of every type of iterable/container
    # "CPY", # flake8-copyright (warn about missing copyright notice at top of file - currently in preview)
    # "D", # pydocstyle (warn about things like missing docstrings)
    # "DOC", # pydoclint (docstring warnings - currently in preview)
    # "DJ",  # flake8-django (Django-specific warnings)
    "DTZ", # flake8-datetimez (warn about datetime calls where no timezone is specified)
    "E",   # pycodestyle errors (warn about major stylistic issues like mixing spaces and tabs)
    # "EM", # flake8-errmsg (warn about exceptions that use string literals that aren't assigned to a variable first)
    # "ERA", # eradicate (warn about commented-out code)
    "EXE", # flake8-executable (warn about files with a shebang present that aren't executable or vice versa)
    "F",   # Pyflakes (a bunch of common warnings for things like unused imports, imports shadowed by variables, etc)
    "FA",  # flake8-future-annotations (warn if certain from __future__ imports are used but missing)
    # "FAST", # FastAPI specific warnings
    # "FBT",  # flake8-boolean-trap (force all boolean arguments passed to functions to be keyword arguments and not positional)
    "FIX",  # flake8-fixme (warn about lines containing FIXME, TODO, XXX, or HACK)
    "FLY",  # flynt (automatically convert from old school string .format to f-strings)
    "FURB", # refurb (A tool for refurbishing and modernizing Python codebases)
    "G",    # flake8-logging-format (warn about logging statements using outdated string formatting methods)
    "I",    # isort (sort all import statements in the order established by isort)
    "ICN",  # flake8-import-conventions (force idiomatic import conventions for certain modules typically imported as something else)
    "INP",  # flake8-no-pep420 (warn about files in the implicit namespace - i.e. force creation of __init__.py files to make packages)
    "INT",  # flake8-gettext (warnings that only apply when you are internationalizing your strings)
    "ISC",  # flake8-implicit-str-concat (warnings related to implicit vs explicit string concatenation)
    "LOG",  # flake8-logging (warn about potential logger issues, but very pedantic)
    "N",    # pep8-naming (force idiomatic naming for classes, functions/methods, and variables/arguments)
    # "NPY",  # NumPy specific rules
    # "PD",   # pandas-vet (Pandas specific rules)
    "PERF", # Perflint (warn about performance issues)
    "PGH",  # pygrep-hooks (force specific rule codes when ignoring type or linter issues on a line)
    "PIE",  # flake8-pie (eliminate unnecessary use of pass, range starting at 0, etc.)
    "PLC",  # Pylint Conventions
    "PLE",  # Pylint Errors
    # "PLR", # Pylint Refactoring suggestions
    "PLW", # Pylint Warnings
    "PT",  # flake8-pytest-style (warnings about unit test best practices)
    # "PTH", # flake8-use-pathlib (force use of pathlib instead of os.path)
    "PYI", # flake8-pyi (warnings related to type hint best practices)
    "Q",   # flake8-quotes (force double quotes)
    "RET", # flake8-return (various warnings related to implicit vs explicit return statements)
    "RSE", # flake8-raise (warn about unnecessary parentheses on raised exceptions)
    "RUF", # Ruff-specific rules (miscellaneous grab bag of lint checks specific to Ruff)
    "S",   # flake8-bandit (security oriented checks, but extremely pedantic - do not attempt to apply to unit test files)
    "SIM", # flake8-simplify (rules to attempt to simplify code)
    # "SLF",  # flake8-self (warn when protected members are accessed outside of a class or file)
    "SLOT", # flake8-slots (warn about subclasses that should define __slots__)
    "T10",  # flake8-debugger (check for pdb traces left in Python code)
    # "T20",  # flake8-print (warn about use of `print` or `pprint` - force use of loggers)
    "TC",  # flake8-type-checking (type checking warnings)
    "TD",  # flake8-todos (force all TODOs to include an author and issue link)
    "TID", # flake8-tidy-imports (extra import rules to check)
    # "TRY", # tryceratops (warnings related to exceptions and try/except)
    "UP",  # pyupgrade (A tool (and pre-commit hook) to automatically upgrade syntax for newer versions of the language)
    "W",   # pycodestyle warnings (warn about minor stylistic issues)
    "YTT", # flake8-2020 (checks for misuse of sys.version or sys.version_info)
]
ignore = [
    # `uv run ruff rule E501` for a description of that rule
    "COM812", # Conflicts with ruff format (see https://docs.astral.sh/ruff/formatter/#conflicting-lint-rules)
    "COM819", # Conflicts with ruff format
    "D203",   # 1 blank line required before class docstring (conflicts with D211)
    "D206",   # Conflicts with ruff format
    "D213",   # Multi-line docstring summary should start at 2nd line (conflicts with D212 which starts at 1st line)
    "D300",   # Conflicts with ruff format
    "E111",   # Conflicts with ruff format
    "E114",   # Conflicts with ruff format
    "E117",   # Conflicts with ruff format
    "ISC002", # Conflicts with ruff format
    "Q000",   # Conflicts with ruff format
    "Q001",   # Conflicts with ruff format
    "Q002",   # Conflicts with ruff format
    "Q003",   # Conflicts with ruff format
    "W191",   # Conflicts with ruff format
]

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

mccabe.max-complexity = 49

[tool.ruff.lint.per-file-ignores]
